**************************
Setup a development system
**************************
To set up a development environment dataGerry does not need any special tools.
Only the generation of a productive binary is generated by additional software (more about this later).
However, it is recommended to set up third-party programs for data storage and
process management independently of the development environment.

.. contents:: Table of Contents
    :local:

Install Python
==============
DataGerry is written in Python 3.6+. This is also the only dependency which is absolutely
necessary to start the program. Python 2 is not supported. Older versions than Python 3.6 may run,
but are not officially supported. The installation of Python 3 is different depending on the operating system.
Please see at the official documentation for details: `Download Python | Python.org <https://www.python.org/downloads/>`_

.. note::
    We are using Python 3.6.x or higher, which is not compatible with Python 2.x.

Clone repository
================
Clone the git repository from our official mirror:
.. code:: bash
    git clone https://github.com/NETHINKS/dataGerry

Install requirements
--------------------
We recommend generating an isolated python environment like ``Virtualenv``
To install the python requirements run:
.. code:: bash
    pip install -r requirements.txt


Setting up third party dependencies
===================================

MongoDB
-------
MongoDB is a document-oriented NoSQL database. It is used to store content and the program uses necessary data.
See the official installation guide for details: `Install MongoDB Community Edition <https://docs.mongodb.com/manual/administration/install-community/>`_

RabbitMQ
--------
RabbitMQ is an open source message broker software that implements the Advanced Message Queuing Protocol (AMQP).
See the official installation guide for details: `Downloading and Installing RabbitMQ <https://www.rabbitmq.com/download.html#installation-guides>`_


Modify configuration file
=========================
Default file is ``etc/cmdb.conf``.
The default configuration should look like this:

.. include:: ../../../../etc/cmdb.conf
    :literal:

Database config
---------------
Configuration section for the MongoDB database.

.. csv-table:: Database config section table
    :file: fixtures/database_config.csv
    :header-rows: 1
    :stub-columns: 1
    :align: left

Webserver config
----------------
Configuration section for the web(rest)-server.

.. csv-table:: Webserver config section table
    :file: fixtures/webserver_config.csv
    :header-rows: 1
    :stub-columns: 1
    :align: left

Message queueing config
-----------------------
Configuration section for the message queueing server.

.. csv-table:: message queueing config section table
    :file: fixtures/message_queueing_config.csv
    :header-rows: 1
    :stub-columns: 1
    :align: left

Starting the backend and frontend
=================================
For a development environment, the frontend must be started independently of the backend,
since these systems are only connected during the compile process.
If only one development of the backend is desired, the frontend can be ignored.
This will then display only one placeholder page.

Starting dataGerry
------------------
To start dataGerry you can use the following command.

.. code-block:: bash
    ./datagerry -s -d

.. note::
    For development it is recommended to start the system in debug mode.

Generate clean database
^^^^^^^^^^^^^^^^^^^^^^^
To generate an empty database, start the CMDB with the ``--setup`` parameter.
This starts a startup routine. During the startup, the database structure is created and a query to the
admin user is started. In addition, the asymmetric key pair is generated under ``/etc/keys/``.

.. note::
    Datagerry is terminated after successful setup, no matter which parameter is used to start it.

.. warning::
    If an already existing database is specified in the configuration, this database will be deleted!

Insert test data (optional)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
Optionally dataGerry can be filled with fictitious test data.
.. code-block:: bash
    ./datagerry --test

Starting angular frontend
-------------------------
This frontend was generated with [Angular CLI](https://github.com/angular/angular-cli) version 7.3.8.

Installation
^^^^^^^^^^^^
Run ``npm install``

Development server
^^^^^^^^^^^^^^^^^^
Run ``ng serve`` for a dev server. Navigate to ``http://localhost:4200/``.
The app will automatically reload if you change any of the source files.

Build
^^^^^^^^
Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.